## Problem 1
class Solution {

   public int findKthLargest(int[] nums, int k) {

       PriorityQueue<Integer> minHeap=new PriorityQueue<>();

       for(int i: nums){

           minHeap.add(i);

           if(minHeap.size()>k){

               minHeap.remove();

           }

       }

       return minHeap.remove();

   }

}

## Problem2

class Solution {

   public ListNode mergeKLists(ListNode[] lists) {

       PriorityQueue<Integer> minHeap=new PriorityQueue<>();

       for(ListNode head:lists){

           while(head!=null){

               minHeap.add(head.val);

               head=head.next;

           }

       }

       ListNode dummy=new ListNode(-1);

       ListNode head=dummy;

       while(!minHeap.isEmpty()){

           head.next=new ListNode(minHeap.remove());

           head=head.next;

       }

       return dummy.next;

   }

}